function Q = calculateCableLengths(varargin)
% CALCULATECABLELENGTHS Computes the eight cable lengths for a 6-DOF, 8-cable
% driven parallel robot.
%
%   Q = CALCULATECABLELENGTHS(container_size, a, b, c, x, y, z, alpha, beta, gamma)
%   computes the cable lengths based on the provided parameters.
%
%   If only 6 arguments are provided, the first four (container_size, a, b, c)
%   default to 60, 7.5, 7.5, and 9 respectively.
%
%   Inputs:
%       container_size : Side length of the container (default: 60)
%       a              : Platform length (default: 7.5)
%       b              : Platform width (default: 7.5)
%       c              : Platform height (default: 9)
%       x, y, z        : Platform center coordinates
%       alpha          : Roll angle (rad)
%       beta           : Pitch angle (rad)
%       gamma          : Yaw angle (rad)
%
%   Output:
%       Q              : An 8x1 vector of cable lengths (each element corresponds
%                        to one cable's length), computed using the derived formulas.
%
%   Note:
%       The following formulas were derived from the geometric relationships
%       between the container's corner positions and the transformed mounting
%       points on the platform. Each cable length is computed as:
%
%         Q_i = sqrt( (Term_i_x)^2 + (Term_i_y)^2 + (Term_i_z)^2 ),
%
%       where the terms involve x, y, z, container_size, a, b, c and the Euler
%       angles (alpha, beta, gamma). Verify these formulas carefully against your
%       derivation.

    % Determine the number of input arguments and assign default values if needed.
    if nargin < 6
        error('Not enough input arguments. At least x, y, z, alpha, beta, gamma must be provided.');
    elseif nargin < 10
        % Only 6 arguments provided: assume they are [x, y, z, alpha, beta, gamma]
        container_size = 60;
        a = 7.5;
        b = 7.5;
        c = 9;
        x = varargin{1};
        y = varargin{2};
        z = varargin{3};
        alpha = varargin{4};
        beta = varargin{5};
        gamma = varargin{6};
    else
        % All 10 arguments provided
        container_size = varargin{1};
        a = varargin{2};
        b = varargin{3};
        c = varargin{4};
        x = varargin{5};
        y = varargin{6};
        z = varargin{7};
        alpha = varargin{8};
        beta = varargin{9};
        gamma = varargin{10};
    end

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %% Compute Cable Lengths for Each Cable Using the Derived Formulas
    % The formulas below compute the Euclidean distance between the container's
    % anchor point and the platform's mounting point for each cable.
    
    % Cable 1:
    Term1_x = container_size - x + (b*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)))/2 ...
              + (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
              - (a*cos(alpha)*cos(beta))/2;
    Term1_y = y - container_size + (b*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)))/2 ...
              + (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
              + (a*cos(beta)*sin(alpha))/2;
    Term1_z = container_size - z + (a*sin(beta))/2 + (c*cos(beta)*cos(gamma))/2 ...
              - (b*cos(beta)*sin(gamma))/2;
    Q1 = sqrt(Term1_x^2 + Term1_y^2 + Term1_z^2-3.6^2);

    % Cable 2:
    Term2_x = x - container_size + (b*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)))/2 ...
              - (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
              + (a*cos(alpha)*cos(beta))/2;
    Term2_y = container_size - z + (a*sin(beta))/2 ...
              + (c*cos(beta)*cos(gamma))/2 ...
              + (b*cos(beta)*sin(gamma))/2;
    Term2_z = y - (b*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)))/2 ...
              + (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
              + (a*cos(beta)*sin(alpha))/2;
    Q2 = sqrt(Term2_x^2 + Term2_y^2 + Term2_z^2-3.6^2);

    % Cable 3:
    Term3_x = container_size - z - (a*sin(beta))/2 + (c*cos(beta)*cos(gamma))/2 + (b*cos(beta)*sin(gamma))/2;
    Term3_y = x + (b*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)))/2 ...
        - (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
        - (a*cos(alpha)*cos(beta))/2;
    Term3_z = y - (b*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)))/2 ...
        + (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
        - (a*cos(beta)*sin(alpha))/2;
    Q3 = sqrt(Term3_x^2 + Term3_y^2 + Term3_z^2-3.6^2);

    % Cable 4:
    Term4_x = y - container_size + (b*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)))/2 ...
        + (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
        - (a*cos(beta)*sin(alpha))/2;
    Term4_y = z - container_size + (a*sin(beta))/2 ...
        - (c*cos(beta)*cos(gamma))/2 ...
        + (b*cos(beta)*sin(gamma))/2;
    Term4_z = (b*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)))/2 ...
        - x + (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
        + (a*cos(alpha)*cos(beta))/2;
    Q4 = sqrt(Term4_x^2 + Term4_y^2 + Term4_z^2-3.6^2);

    % Cable 5:
    Term5_x = z - (a*sin(beta))/2 ...
        + cos(beta)*sin(gamma)*(b/2 - 3/2) ...
        + (c*cos(beta)*cos(gamma))/2;
    Term5_y = x - container_size - (b/2 - 3/2)*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)) ...
        + (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
        + (a*cos(alpha)*cos(beta))/2;
    Term5_z = y - container_size + (b/2 - 3/2)*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)) ...
        - (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
        + (a*cos(beta)*sin(alpha))/2;
    Q5 = sqrt(Term5_x^2 + Term5_y^2 + Term5_z^2-3.6^2);

    % Cable 6:
    Term6_x = y - (b/2 - 3/2)*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)) ...
        - (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
        + (a*cos(beta)*sin(alpha))/2;
    Term6_y = z - (a*sin(beta))/2 ...
        - cos(beta)*sin(gamma)*(b/2 - 3/2) ...
        + (c*cos(beta)*cos(gamma))/2;
    Term6_z = x - container_size + (b/2 - 3/2)*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)) ...
        + (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
        + (a*cos(alpha)*cos(beta))/2;
    Q6 = sqrt(Term6_x^2 + Term6_y^2 + Term6_z^2-3.6^2);

    % Cable 7:
    Term7_x = x + (b/2 - 3/2)*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)) ...
        + (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
        - (a*cos(alpha)*cos(beta))/2;
    Term7_y = z + (a*sin(beta))/2 ...
        - cos(beta)*sin(gamma)*(b/2 - 3/2) ...
        + (c*cos(beta)*cos(gamma))/2;
    Term7_z = (b/2 - 3/2)*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)) ...
        - y + (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
        + (a*cos(beta)*sin(alpha))/2;
    Q7 = sqrt(Term7_x^2 + Term7_y^2 + Term7_z^2-3.6^2);

    % Cable 8:
    Term8_x = x - (b/2 - 3/2)*(cos(gamma)*sin(alpha) - cos(alpha)*sin(beta)*sin(gamma)) ...
        + (c*(sin(alpha)*sin(gamma) + cos(alpha)*cos(gamma)*sin(beta)))/2 ...
        - (a*cos(alpha)*cos(beta))/2;
    Term8_y = z + (a*sin(beta))/2 + cos(beta)*sin(gamma)*(b/2 - 3/2) + (c*cos(beta)*cos(gamma))/2;
    Term8_z = container_size - y - (b/2 - 3/2)*(cos(alpha)*cos(gamma) + sin(alpha)*sin(beta)*sin(gamma)) ...
        + (c*(cos(alpha)*sin(gamma) - cos(gamma)*sin(alpha)*sin(beta)))/2 ...
        + (a*cos(beta)*sin(alpha))/2;
    Q8 = sqrt(Term8_x^2 + Term8_y^2 + Term8_z^2-3.6^2);

    % Combine the eight cable lengths into an 8x1 column vector
    Q = [Q1; Q2; Q3; Q4; Q5; Q6; Q7; Q8];
end


%input x,y,z,alpha,beta,gamma
     %cm,cm,cm,rad,rad,rad

%output
% (q1
%   q2
 %  q3
   q4
   q5
   q6
   q7
   q8)

