function T_cable = cable_tension(x, y, z, roll, pitch, yaw, a, euler_dot, euler_ddot)
    % CABLE_TENSION 计算八根绳的张力（单位：N）
    %
    %   T_cable = cable_tension(x, y, z, roll, pitch, yaw, a, euler_dot, euler_ddot)
    %   其中:
    %       x, y, z         : 平台质心坐标 (m)
    %       roll, pitch, yaw: Euler角 (rad)，其中 roll = φ, pitch = θ, yaw = ψ
    %       a               : 平台尺寸参数（此处仅用作示例，具体关系依据实际模型确定）
    %       euler_dot       : Euler角速度向量 [dot_phi; dot_theta; dot_psi] (rad/s)
    %       euler_ddot      : Euler角加速度向量 [ddot_phi; ddot_theta; ddot_psi] (rad/s^2)
    %
    %   默认其他平台与容器参数：
    %       平台质量 m = 1.2 kg, 重力 g = [0; 0; -9.81] m/s^2
    %       平台惯性矩阵 I = diag([0.5, 0.5, 1]) kg·m^2
    %       容器边长 = 0.6 m
    %       平台挂载点相对于平台中心的几何构造由 r_platform 定义
    %
    %   通过计算平台外力和外力矩，构造平衡矩阵 A，
    %   并利用正则化最小二乘法求解平衡方程 A*T = W 得到张力 T_cable (8×1)
    
    %% ----------------------------
    %% 参数设置（平台与运动学参数）
    m = 1.2;                  % 平台质量 (kg)
    g = [0; 0; -9.81];        % 重力 (m/s^2)
    I = diag([0.5, 0.5, 1]);   % 平台惯性矩阵 (kg·m^2)
    
    % 平台线性加速度 (示例值)
    a_dyn = [1; -2; 0.0];     % m/s^2
    
    % 欧拉角速率和加速度（输入参数）
    % euler_dot 和 euler_ddot 分别为 3×1 向量
    
    %% ----------------------------
    %% Step 1: 计算平台外力 F_ext 和外力矩 M_ext（完整考虑 T_dot）
    F_ext = m * (a_dyn + g);  % 平移外力
    
    % 构造欧拉角转换矩阵 (ZYX顺序) 注意: 此处 roll=phi, pitch=theta, yaw=psi
    phi = roll; theta = pitch; psi = yaw;
    T_mat = [ 1,        0,            -sin(theta);
              0,  cos(phi),    cos(theta)*sin(phi);
              0, -sin(phi),    cos(theta)*cos(phi)];
    
    omega = T_mat * euler_dot;  % 角速度
    
    % 计算 T_mat 关于 phi 和 theta 的偏导数
    dT_dphi = [ 0,            0,              0;
                0,      -sin(phi),    cos(theta)*cos(phi);
                0,      -cos(phi),   -cos(theta)*sin(phi)];
    
    dT_dtheta = [ 0,            0,             -cos(theta);
                  0,            0,             -sin(theta)*sin(phi);
                  0,            0,             -sin(theta)*cos(phi)];
    
    T_dot = dT_dphi * euler_dot(1) + dT_dtheta * euler_dot(2);
    
    alpha_dyn = T_dot * euler_dot + T_mat * euler_ddot;  % 角加速度
    M_ext = I * alpha_dyn + cross(omega, I * omega);       % 外力矩
    
    % 合成外部作用向量 W
    W = [F_ext; M_ext];
    
    disp('外力 F_ext (N):'); disp(F_ext);
    disp('外力矩 M_ext (N·m):'); disp(M_ext);
    
    %% ----------------------------
    %% Step 2: 构造矩阵 A (6x8) 用于平衡方程 A*T = W
    container_size = 0.6;   % 容器边长 (m)
    
    % 定义容器锚点 (CV)，正方体容器的八个角
    cv1 = [container_size; container_size; container_size];
    cv2 = [container_size; 0; container_size];
    cv3 = [0; 0; container_size];
    cv4 = [0; container_size; container_size];
    cv5 = [container_size; container_size; 0];
    cv6 = [container_size; 0; 0];
    cv7 = [0; 0; 0];
    cv8 = [0; container_size; 0];
    CV = [cv1, cv2, cv3, cv4, cv5, cv6, cv7, cv8];
    
    % 计算平台挂载点位置，利用辅助函数 corner_positions (假设已实现)
    % 注意：corner_positions 的单位要求与本例一致，本处将位姿放大100倍计算后再除以100
    p = corner_positions(x*100, y*100, z*100, yaw, pitch, roll) ./ 100;
    
    % 此处容器锚点与 CV 一致
    B = CV;
    
    % 计算每根绳的牵引方向单位向量 u (3x8)
    u = zeros(3,8);
    for i = 1:8
        diff_vec = B(:,i) - p(:,i);
        u(:,i) = diff_vec / norm(diff_vec);
    end
    
    % 平台中心为 [x; y; z]
    center = [x; y; z];
    
    % 计算 r 向量：每个挂载点相对于平台中心的位移
    r = zeros(size(p));
    for i = 1:8
        r(:,i) = p(:,i) - center;
    end
    
    % 构造矩阵 A：上半部分为 u_i， 下半部分为 r_i x u_i
    A = zeros(6, 8);
    for i = 1:8
        A(1:3, i) = u(:, i);
        A(4:6, i) = cross(r(:, i), u(:, i));
    end
    
    %% ----------------------------
    %% Step 3: 利用正则化最小二乘法求解张力 T
    lambda = 1e-3;  % 正则化参数
    T_cable = (A' * A + lambda * eye(size(A,2))) \ (A' * W);
    
    disp('求解得到的八根绳子的张力 (N):');
    disp(T_cable);
    
    %% 绘图显示外部作用与估计值比较
    W_est = A * T_cable;
    figure;
    subplot(2,1,1);
    stem(W(1:3), 'filled'); title('外力 F_{ext}');
    subplot(2,1,2);
    stem(W(4:6), 'filled'); title('外力矩 M_{ext}');
    
    figure;
    subplot(2,1,1);
    stem(W_est(1:3), 'filled'); title('A*T: 估计外力');
    subplot(2,1,2);
    stem(W_est(4:6), 'filled'); title('A*T: 估计外力矩');
    
    % 输出张力作为 8x1 double 向量
    T_cable = double(T_cable);
end
